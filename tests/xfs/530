#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021 Chandan Babu R.  All Rights Reserved.
#
# FS QA Test 530
#
# Verify that XFS does not cause inode fork's extent count to overflow when
# punching out an extent.
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/inject

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs xfs
_require_scratch
_require_xfs_debug
_require_xfs_io_command "fpunch"
_require_xfs_io_command "finsert"
_require_xfs_io_command "fcollapse"
_require_xfs_io_command "fzero"
_require_xfs_io_error_injection "reduce_max_iextents"

echo "Format and mount fs"
_scratch_mkfs >> $seqres.full
_scratch_mount >> $seqres.full

bsize=$(_get_file_block_size $SCRATCH_MNT)
nr_blks=30

testfile=$SCRATCH_MNT/testfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

for op in fpunch finsert fcollapse fzero; do
	echo "* $op regular file"

	echo "Create \$testfile"
	$XFS_IO_PROG -f -s \
		     -c "pwrite -b $((nr_blks * bsize)) 0 $((nr_blks * bsize))" \
		     $testfile  >> $seqres.full

	echo "$op alternating blocks"
	for i in $(seq 1 2 $((nr_blks - 1))); do
		$XFS_IO_PROG -f -c "$op $((i * bsize)) $bsize" $testfile \
		       >> $seqres.full 2>&1
		[[ $? != 0 ]] && break
	done

	echo "Verify \$testfile's extent count"

	nextents=$(xfs_get_fsxattr nextents $testfile)
	if (( $nextents > 10 )); then
		echo "Extent count overflow check failed: nextents = $nextents"
		exit 1
	fi

	rm $testfile
done

# success, all done
status=0
exit
