#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2020 YOUR NAME HERE.  All Rights Reserved.
#
# FS QA Test 526
#
# what am I here for?
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs xfs
_require_scratch

buffered_write_to_unwritten_extent()
{
	echo "* Buffered write to unwritten extent"

	echo "Format and mount fs"
	_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full
	_scratch_mount >> $seqres.full

	bsize=$(_get_block_size $SCRATCH_MNT)
	
	testfile=${SCRATCH_MNT}/testfile

	nr_blks=15

	echo "Fallocate $nr_blks blocks"
	xfs_io -f -c "falloc 0 $((nr_blks * bsize))" $testfile >> $seqres.full

	echo "Inject reduce_max_iextents error tag"
	xfs_io -x -c "inject reduce_max_iextents" $SCRATCH_MNT

	echo "Buffered write to every other block of fallocated space"
	for i in $(seq 1 2 $((nr_blks - 1))); do
		xfs_io -f -c "pwrite $((i * bsize)) $bsize" -c fsync $testfile >> $seqres.full 2>&1
		[[ $? != 0 ]] && break
	done

	ino=$(stat -c "%i" $testfile)

	_scratch_unmount >> $seqres.full

	echo "Verify \$testfile's extent count"
	nextents=$(_scratch_xfs_db  -c "inode $ino" -c "print core.nextents")
	nextents=${nextents##core.nextents = }

	if (( $nextents > 10 )); then
		echo "Extent count overflow check failed: nextents = $nextents"
	fi
}

direct_write_to_unwritten_extent()
{
	echo "* Direct I/O write to unwritten extent"

	echo "Format and mount fs"
	_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full
	_scratch_mount >> $seqres.full

	bsize=$(_get_block_size $SCRATCH_MNT)
	
	testfile=${SCRATCH_MNT}/testfile

	nr_blks=15

	echo "Fallocate $nr_blks blocks"
	xfs_io -f -c "falloc 0 $((nr_blks * bsize))" $testfile >> $seqres.full

	echo "Inject reduce_max_iextents error tag"
	xfs_io -x -c "inject reduce_max_iextents" $SCRATCH_MNT

	echo "Direct I/O write to every other block of fallocated space"
	for i in $(seq 1 2 $((nr_blks - 1))); do
		xfs_io -f -d -c "pwrite $((i * bsize)) $bsize" $testfile >> $seqres.full 2>&1
		[[ $? != 0 ]] && break
	done

	ino=$(stat -c "%i" $testfile)

	_scratch_unmount >> $seqres.full

	echo "Verify \$testfile's extent count"
	nextents=$(_scratch_xfs_db  -c "inode $ino" -c "print core.nextents")
	nextents=${nextents##core.nextents = }

	if (( $nextents > 10 )); then
		echo "Extent count overflow check failed: nextents = $nextents"
	fi
}

buffered_write_to_unwritten_extent
direct_write_to_unwritten_extent

# success, all done
status=0
exit
