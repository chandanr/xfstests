#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2020 YOUR NAME HERE.  All Rights Reserved.
#
# FS QA Test 528
#
# what am I here for?
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_require_scratch

echo "* Reflink remap extents"

echo "Format and mount fs"
_scratch_mkfs >> $seqres.full
_scratch_mount >> $seqres.full

bsize=$(_get_block_size $SCRATCH_MNT)

srcfile=${SCRATCH_MNT}/srcfile
dstfile=${SCRATCH_MNT}/dstfile

nr_blks=15

echo "Create \$srcfile having an extent of length $nr_blks blocks"
xfs_io -f -c "pwrite -b $((nr_blks * bsize))  0 $((nr_blks * bsize))" -c fsync $srcfile >> $seqres.full

echo "Create \$dstfile having an extent of length $nr_blks blocks"
xfs_io -f -c "pwrite -b $((nr_blks * bsize))  0 $((nr_blks * bsize))" -c fsync $dstfile >> $seqres.full

echo "Inject reduce_max_iextents error tag"
xfs_io -x -c 'inject reduce_max_iextents' $SCRATCH_MNT

echo "Reflink every other block from \$srcfile into \$dstfile"
for i in $(seq 1 2 $((nr_blks - 1))); do
	xfs_io -f -c "reflink $srcfile $((i * bsize)) $((i * bsize)) $bsize" $dstfile >> $seqres.full 2>&1
done

ino=$(stat -c "%i" $dstfile)

_scratch_unmount >> $seqres.full

echo "Verify \$dstfile's extent count"
nextents=$(_scratch_xfs_db  -c "inode $ino" -c "print core.nextents")
nextents=${nextents##core.nextents = }

if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = ${nextents}"
fi

# success, all done
status=0
exit
