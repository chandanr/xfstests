#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2020 Chandan Babu R.  All Rights Reserved.
#
# FS QA Test 528
#
# Verify that XFS does not cause inode fork's extent count to overflow when
# writing to a shared extent.
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink
. ./common/inject

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs xfs
_require_scratch
_require_scratch_reflink
_require_xfs_debug
_require_xfs_io_command "reflink"
_require_xfs_io_command "funshare"
_require_xfs_io_error_injection "reduce_max_iextents"

echo "Format and mount fs"
_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full
_scratch_mount >> $seqres.full

bsize=$(_get_block_size $SCRATCH_MNT)

nr_blks=40

srcfile=${SCRATCH_MNT}/srcfile
dstfile=${SCRATCH_MNT}/dstfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Create a \$srcfile having an extent of length $nr_blks blocks"
$XFS_IO_PROG -f -c "pwrite -b $((nr_blks * bsize))  0 $((nr_blks * bsize))" \
       -c fsync $srcfile  >> $seqres.full

echo "* Write to shared extent"

echo "Share the extent with \$dstfile"
$XFS_IO_PROG -f -c "reflink $srcfile" $dstfile >> $seqres.full

echo "Buffered write to every other block of \$dstfile's shared extent"
for i in $(seq 1 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -s -c "pwrite $((i * bsize)) $bsize" $dstfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$dstfile's extent count"
nextents=$($XFS_IO_PROG -c 'stat' $dstfile | grep nextents)
nextents=${nextents##fsxattr.nextents = }
if (( $nextents > 35 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

rm $dstfile

echo "* Funshare shared extent"

echo "Share the extent with \$dstfile"
$XFS_IO_PROG -f -c "reflink $srcfile" $dstfile >> $seqres.full

echo "Funshare every other block of \$dstfile's shared extent"
for i in $(seq 1 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -s -c "funshare $((i * bsize)) $bsize" $dstfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$dstfile's extent count"
nextents=$($XFS_IO_PROG -c 'stat' $dstfile | grep nextents)
nextents=${nextents##fsxattr.nextents = }
if (( $nextents > 35 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

# super_block->s_wb_err will have a newer seq value when compared to "/"'s
# file->f_sb_err. Consume it here so that xfs_scrub can does not error out.
$XFS_IO_PROG -c syncfs $SCRATCH_MNT >> $seqres.full 2>&1

# success, all done
status=0
exit
 
